
var htmls = {
    1: '<div class="info"><p>Welcome!</p><p>Today we will use R to look to the data from the U.S elections for each county and also important data on its education numbers, crime, unemployment etc.</p><p>After we analyse, visualise and understand the information we have, we will try to see the connection between this and the way people vote.</p><p>So let`s begin! First we need to set our working directory to be the one with all the files.</p><p> Load each csv and store them into a variable.</p><p> Later we can check the top part of any of our Dataframes with "head" or get familiar with all the variables with "names".</p></div><div class="code"><p>setwd<span class="blue">(</span><span class="green">"C:/Folder where you extracted the files"</span><span class="blue">)</span></p><p>votes <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"votes.csv"</span><span class="blue">)</span></p><p>education <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"Education.csv"</span><span class="blue">)</span></p><p>population <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"PopulationEstimates.csv"</span><span class="blue">)</span></p><p>poverty <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"PovertyEstimates.csv"</span><span class="blue">)</span></p><p>unemployment <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"Unemployment.csv"</span><span class="blue">)</span></p><p>crime <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"CrimeData.csv"</span>, sep <span class="blue">=</span> <span class="green">"\t"</span><span class="blue">)</span> <br> <br>head<span class="blue">(</span>poverty<span class="blue">)</span></p><p>names<span class="blue">(</span>education<span class="blue">)</span></p></div><button id="2">Run Code</button>',
    2: '<div class="content"><img class="names" src="assets/names_education.png"></div></div><div class="info"><p> Nice!</p><p> We can now gather all the information in one big data frame just with the variables relevant to us.</p><p>Store all the columns in this new variable called "election".</p><p>Than write the data in a new csv file.</p><p>To accomplish this we will use an package called SQLDF which allows us to use sql syntax to perform selections. Just to show how it works because R has other much more practical (in my humble opinion) ways to achieve this.</p><p> It is a big chunk of code!</p></div><div class="code"><p>install.packages<span class="blue">(</span><span class="green">"sqldf"</span><span class="blue">)</span><br>install.packages<span class="blue">(</span><span class="green">"tcltk"</span><span class="blue">)</span><br><span class="orange">library</span><span class="blue">(</span>sqldf<span class="blue">)</span><br><span class="orange">library</span><span class="blue">(</span>tcltk<span class="blue">)</span><br><br>election<span class="blue"><-</span> sqldf<span class="blue">(</span></p><span class="green">"select vot.FIPS `countyID`, vot.county_name `county`<br>, vot.state_abbr `state`, vot.votes_dem_2016 `votes_dem` <br>, vot.votes_gop_2016 `votes_gop` <br>, vot.total_votes_2016 `votes_total` <br>, vot.Clinton `Clinton_points`, vot.Trump`Trump_points` <br>, vot.per_point_diff_2016 `point_diff`<br>, vot.diff_2016 `votes_diff`, vot.SEX255214 `female%` <br>, vot.White + vot.RHI825214 `white`, vot.Black `black` <br>, vot.RHI325214 `native`, vot.RHI425214 `asian` <br>, vot.RHI525214 `hawaiian`, vot.RHI625214 `multiple_races` <br>, vot.Hispanic `hispanic`, vot.POP645213 `foreign_born` <br>, pov.PCTPOVALL_2015 `perc_poverty` <br>, pov.MEDHHINC_2015 `household_income` <br>, pop.POP_ESTIMATE_2015 `population_estimate` <br>, une.Unemployment_rate_2015 `unemployment` <br>, edu.less_high_school_2015 `less_than_hs` <br>, edu.high_school_2015 `highschool` <br>, edu.col_incomplete_2015 `associate` <br>, edu.bachelors_2015 `bachelor_or_higher` <br>, cri.MURDER, cri.RAPE, cri.ROBBERY, cri.AGASSLT <br>, cri.BURGLRY, cri.LARCENY, cri.MVTHEFT, cri.ARSON <br>from votes vot, poverty pov, population pop, unemployment une <br>, education edu, crime cri <br> where vot.FIPS = pov.FIPStxt and vot.FIPS = une.FIPStxt <br>and vot.FIPS = pop.FIPS and vot.FIPS = edu.FIPS <br>and vot.FIPS = cri.X||rightstr("000" || cri.FIPS_CTY, 3) <br>and vot.state_abbr not in ("AK","PR")"</span><span class="blue">)<br><br></span>head<span class="blue">(</span>election<span class="blue">)</span><br>write.csv<span class="blue">(</span>election, file <span class="blue">=</span> <span class="green">"Election1.csv"</span><span class="blue">)</span></div><div class="button_run"><button id="3">Run Code</button></div>',
    3: '<div class="info"><p> Perfect!</p><p> Now we are going to keep tranforming our data, for this we want to use this fantastic R library called DPLYR. </p><p> I suggest you search a little bit on the internet in order to fully understand what is going on here.</p><p> The commands are explained in the comments.</p></div><div class="code">    install.packages<span class="blue">(</span><span class="green">"dplyr"</span><span class="blue">)</span><br><span class="orange">library</span><span class="blue">(</span>dplyr<span class="blue">)</span> <br> <br>df <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"Election updated.csv"</span><span class="blue">)</span><br><br><span class="comment">#Take the comma off the column</span><br>df<span class="blue">$</span>population_estimate <span class="blue"><-</span> as.numeric<span class="blue">(</span>gsub<span class="blue">(</span><span class="green">","</span>,<span class="green">""</span>, df<span class="blue">$</span>population_estimate<span class="blue">))</span><br><br><span class="comment">#Create a new column with the sum of all crimes</span><br>df <span class="blue"><-</span> mutate<span class="blue">(</span>df, sum_crimes <span class="blue">=</span> MURDER<span class="blue">+</span>RAPE<span class="blue">+</span>ROBBERY<span class="blue">+</span>AGASSLT<span class="blue">+</span>BURGLRY<span class="blue">+</span>LARCENY<span class="blue">+</span>MVTHEFT<span class="blue">+</span>ARSON<span class="blue">)</span><br><br><span class="comment"># Crimes as a percentage of total population</span><br>df<span class="blue">$</span>sum_crimes <span class="blue"><- (</span>df<span class="blue">$</span>sum_crimes<span class="blue">/</span>df<span class="blue">$</span>population_estimate<span class="blue">)*100</span><br><br><span class="comment">#Bring votes to same percentage scale</span><br>df<span class="blue">$</span>Trump_points <span class="blue"><-</span> df<span class="blue">$</span>Trump_points<span class="blue">*100</span><br>    df<span class="blue">$</span>Clinton_points <span class="blue"><-</span> df<span class="blue">$</span>Clinton_points<span class="blue">*100</span><br>    df<span class="blue">$</span>point_diff <span class="blue"><-</span> df<span class="blue">$</span>Trump_points<span class="blue">-</span>df<span class="blue">$</span>Clinton_points<br><br>    <span class="comment">#New Dataframe with just some of the columns</span><br>df2 <span class="blue"><-</span> df <span class="blue">%>%</span> select<span class="blue">(</span>countyID, county, state, point_diff, female., white, black, native, asian, hawaiian, multiple_races, hispanic, foreign_born, perc_poverty, population_estimate, unemployment, less_than_hs, highschool, associate, bachelor_or_higher, sum_crimes<span class="blue">)</span> <br><br><span class="comment">#Dataframe to new csv file</span> <br>write.csv<span class="blue">(</span>df2, file <span class="blue">=</span> <span class="green">"Election2.csv"</span><span class="blue">)</span></div><div class="button_run"><button id="4">Run Code</button></div>',
    4: '<div class="info"><p> Alright! So now it is time for us to start drawing some maps!</p><p> Charts based on area of map are named Choropleths and that is what we want here, a map of the U.S delimited per county. To achieve this we will use a new package called ChoroplethR, that pretty much does all the work for us. </p><p> It does not have almost any styling features but for now it is fine, later on we will be introduced to other libraries with much more power.</p></div><div class="code">install.packages<span class="blue">(</span><span class="green">"choroplethr"</span><span class="blue">)</span><br>install.packages<span class="blue">(</span><span class="green">"choroplethrMaps"</span><span class="blue">)</span><br><span class="orange">library</span><span class="blue">(</span>choroplethr<span class="blue">)</span><br><span class="orange">library</span><span class="blue">(</span>choroplethrMaps<span class="blue">)</span><br><br>dfTemp <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"Election2.csv"</span><span class="blue">)</span><br><br><span class="comment">#ELECTION MAP</span><br>df <span class="blue"><-</span> dfTemp <span class="blue">%>%</span> select<span class="blue">(</span>region <span class="blue">=</span>  countyID , value <span class="blue">=</span> point_diff<span class="blue">)</span><br>county_choropleth<span class="blue">(</span>df, title <span class="blue">=</span> <span class="green">"U.S COUNTY LEVEL ELECTIONS 2016"</span>, <br>legend <span class="blue">=</span> <span class="green">"US Elections 2016"</span>, num_colors <span class="blue">= 9)</span></div><div class="button_run" > <button id="5">Run Code</button></div>',
    5: '<div class="content"><img class="choro" src="assets/Map_elections.png"></div><div class="code"><span class="comment">#CRIME MAP</span><br>df <span class="blue"><-</span> dfTemp <span class="blue">%>%</span> select<span class="blue">(</span>region <span class="blue">=</span>  countyID , value <span class="blue">=</span> sum_crimes<span class="blue">)</span><br> county_choropleth<span class="blue">(</span>df, title <span class="blue">=</span> <span class="green">"U.S COUNTY LEVEL CRIME REPORT MAP"</span>, <br>legend <span class="blue">=</span> <span class="green">"All Crimes reported"</span>, num_colors <span class="blue">= 9)</span></div><div class="button_run" ><button id="6">Run Code</button></div>',
    6: '<div class="content"><img class="choro" src="assets/Map_crime.png"></div><div class="code"><span class="comment">#FOREIGN MAP</span><br>df <span class="blue"><-</span> dfTemp <span class="blue">%>%</span> select<span class="blue">(</span>region <span class="blue">=</span>  countyID , value <span class="blue">=</span> foreign_born<span class="blue">)</span><br>county_choropleth<span class="blue">(</span>df, title <span class="blue">=</span> <span class="green">"U.S COUNTY LEVEL IMMIGRANT MAP"</span>,<br>legend <span class="blue">=</span> <span class="green">"IMMIGRANT MAP"</span>, num_colors <span class="blue">= 9)</span></div><div class="button_run"><button id="7">Run Code</button></div>',
    7: '<div class="content"><img class="choro" src="assets/Map_immigrant.png"></div><div class="code"><span class="comment">#UNEMPLOYMENT MAP</span><br>df <span class="blue"><-</span> dfTemp <span class="blue">%>%</span> select<span class="blue">(</span>region <span class="blue">=</span>  countyID , value <span class="blue">=</span> unemployment<span class="blue">)</span><br>county_choropleth<span class="blue">(</span>df, title <span class="blue">=</span> <span class="green">"U.S COUNTY LEVEL UNEMPLOYMENT MAP"</span>,<br>legend <span class="blue">=</span> <span class="green">"UNEMPLOYMENT MAP"</span>, num_colors <span class="blue">= 9)</span></div><div class="button_run" ><button id="8">Run Code</button></div>',
    8: '<div class="content"><img class="choro" src="assets/Map_unemployment.png"></div><div class="code"><span class="comment">#POVERTY MAP</span> <br>df <span class="blue"><-</span> dfTemp <span class="blue">%>%</span> select<span class="blue">(</span>region <span class="blue">=</span>  countyID , value <span class="blue">=</span> perc_poverty<span class="blue">)</span> <br>county_choropleth<span class="blue">(</span>df, title <span class="blue">=</span> <span class="green">"U.S COUNTY LEVEL POVERTY MAP"</span>, <br>legend <span class="blue">=</span> <span class="green">"POVERTY MAP"</span>, num_colors <span class="blue">= 9)</span></div><div class="button_run" ><button id="9">Run Code</button></div>',
    9: '<div class="content"><img class="choro" src="assets/Map_poverty.png"></div><div class="code"><span class="comment">#EDUCATION MAP LESS HIGH</span> <br>df <span class="blue"><-</span> dfTemp <span class="blue">%>%</span> select<span class="blue">(</span>region <span class="blue">=</span>  countyID , value <span class="blue">=</span> less_than_hs<span class="blue">)</span> <br>county_choropleth<span class="blue">(</span>df, title <span class="blue">=</span> <span class="green">"U.S COUNTY LEVEL EDUCATION MAP"</span>, <br>legend <span class="blue">=</span> <span class="green">"LESS THAN HIGH SCHOOL"</span>, num_colors <span class="blue">= 9)</span></div><div class="button_run"><button id="10">Run Code</button></div>',
    10: '<div class="content"><img class="choro" src="assets/Map_highschool.png"></div><div class="code"><span class="comment">#EDUCATION MAP BACHELORS</span> <br>df <span class="blue"><-</span> dfTemp <span class="blue">%>%</span> select<span class="blue">(</span>region <span class="blue">=</span>  countyID , value <span class="blue">=</span> bachelor_or_higher<span class="blue">)</span> <br>county_choropleth<span class="blue">(</span>df, title <span class="blue">=</span> <span class="green">"U.S COUNTY LEVEL EDUCATION MAP"</span>,<br>legend <span class="blue">=</span> <span class="green">"BACHELORS +"</span>, num_colors <span class="blue">= 9)</span></div><div class="button_run"><button id="11">Run Code</button></div>',
    11: '<div class="content"><img class="choro" src="assets/Map_bachelors.png"></div><div class="code"><span class="comment">#HOUSEHOLD INCOME MAP</span> <br>dfTemp <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"Election updated.csv"</span><span class="blue">)</span> <br>dfTemp<span class="blue">$</span>household_income <span class="blue"><-</span> as.numeric<span class="blue">(</span>gsub<span class="blue">(</span><span class="green">","</span>,<span class="green">""</span>,dfTemp<span class="blue">$</span>household_income<span class="blue">))</span> <br>df <span class="blue"><-</span> dfTemp <span class="blue">%>%</span> select<span class="blue">(</span>region <span class="blue">=</span>  countyID , value <span class="blue">=</span> household_income<span class="blue">)</span> <br>county_choropleth<span class="blue">(</span>df, title <span class="blue">=</span> <span class="green">"U.S COUNTY LEVEL HOUSEHOLD INCOME"</span>,<br>legend <span class="blue">=</span> <span class="green">"HOUSEHOLD INCOME"</span>, num_colors <span class="blue">= 9)</span></div><div class="button_run"><button id="12">Run Code</button></div>',
    12: '<div class="content"><img class="choro" src="assets/Map_house_income.png"></div><div class="info"><p>Yeah!</p><p>Now lets see this new package called PLOTLY, it is more powerful and allows us to fully customize our graphs.</p><p>Oh! And they are interactive, pretty cool han?</p><p>A little more complicated but once you grasp the concept you will be fine.</p><p>Lets make a scatter plot with the best and worst counties in terms of education.</p></div><div class="code">install.packages<span class="blue">(</span><span class="green">"plotly"</span><span class="blue">)</span><br><span class="orange">library</span> <span class="blue">(</span>plotly<span class="blue">)</span><br><br>df2 <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"Election2.csv"</span><span class="blue">)</span><br><br><span class="comment">#Preparing education data</span><br>df <span class="blue"><-</span> df2 <span class="blue">%>%</span> select<span class="blue">(</span>county, state, less_than_hs, bachelor_or_higher,<br><span style="padding-left: 230px">population_estimate<span class="blue">)</span></span><br>dfBach <span class="blue"><-</span> df <span class="blue">%>%</span> arrange<span class="blue">(</span>desc<span class="blue">(</span>bachelor_or_higher<span class="blue">)) %>%</span> head<span class="blue">(100)</span>    <br>dfBach <span class="blue"><-</span> mutate<span class="blue">(</span>dfBach, category <span class="blue">=</span> <span class="green">"#24234d"</span><span class="blue">)</span><br> dfLess <span class="blue"><-</span> df <span class="blue">%>%</span> arrange<span class="blue">(</span>desc<span class="blue">(</span>less_than_hs<span class="blue">)) %>%</span> head<span class="blue">(100)</span><br> dfLess <span class="blue"><-</span> mutate<span class="blue">(</span>dfLess, category <span class="blue">=</span> <span class="green">"#84234d"</span><span class="blue">)</span><br> dfBachLess <span class="blue"><-</span> rbind<span class="blue">(</span>dfBach, dfLess<span class="blue">)</span><br><br><span class="comment">#Ploting education</span> <br>p <span class="blue"><-</span> plot_ly<span class="blue">(</span>data <span class="blue">=</span> dfBachLess, x <span class="blue">= ~</span>less_than_hs, y <span class="blue">= ~</span>bachelor_or_higher,<br><span style="padding-left: 130px"> text <span class="blue">= ~</span>paste<span class="blue">(</span><span class="green">"State: "</span>, state, <span class="green">"&#60;br&#62;County:"</span>, county,</span><br><div style="padding-left: 285px"><span class="green">"&#60;br&#62;% Less than High School:"</span>, less_than_hs,<br><span class="green">"&#60;br&#62;% Bachelors+:"</span>, bachelor_or_higher,<br><span class="green">"&#60;br&#62;Total Population:"</span>, population_estimate<span class="blue">)</span>, </div><span style="padding-left: 130px">marker <span class="blue">=</span> list<span class="blue">(</span>size <span class="blue">= 15</span>, </span> <br><div style="padding-left: 277px">color <span class="blue">= ~</span>category, <br>line <span class="blue">=</span> list<span class="blue">(</span>color <span class="blue">=</span> <span class="green">"#ffffff"</span>, <br>width <span class="blue">= 1))) %>%</span> </div><span style="padding-left: 130px">layout<span class="blue">(</span>title = <span class="green">"Education Top vs Bottom Counties"</span>, </span><br><div style="padding-left: 207px">yaxis <span class="blue">=</span> list<span class="blue">(</span>zeroline <span class="blue">= FALSE)</span>, <br>xaxis <span class="blue">=</span> list<span class="blue">(</span>zeroline <span class="blue">= FALSE))</span>;p </div></div><button id="13">Run Code</button>',
    13: '<div class="frames"><iframe class="graphs" src="education%20counties.html"></iframe></div><div class="info"><p>Nice!</p><p>On the top left the counties with more percentage of people with at least a Bachelors degree and less percentage without high school.</p><p>On the bottom we see the opposite, less Bachelors and more people without high school.</p><p>Now lets plot the counties with best and worst unemployment and poverty rates.</p></div><div class="code"><span class="comment">#Preparing unemployment and poverty data</span> <br>df <span class="blue"><-</span> df2 <span class="blue">%>%</span> select<span class="blue">(</span>county, state, unemployment, perc_poverty, <br><span style="padding-left: 230px">population_estimate<span class="blue">)</span> </span> <br>dfPov <span class="blue"><-</span> df <span class="blue">%>%</span> arrange<span class="blue">(</span>desc<span class="blue">(</span>perc_poverty<span class="blue">)) %>%</span> head<span class="blue">(100)</span> <br>dfPov <span class="blue"><-</span> mutate<span class="blue">(</span>dfPov, category <span class="blue">=</span> <span class="green">"#24234d"</span><span class="blue">)</span><br>dfRich <span class="blue"><-</span> df <span class="blue">%>%</span> arrange<span class="blue">(</span>perc_poverty<span class="blue">) %>%</span> head<span class="blue">(100)</span><br>dfRich <span class="blue"><-</span> mutate<span class="blue">(</span>dfRich, category <span class="blue">=</span> <span class="green">"#84234d"</span><span class="blue">)</span><br>dfPovRich <span class="blue"><-</span> rbind<span class="blue">(</span>dfPov, dfRich<span class="blue">)</span> <br> <br><span class="comment"># Ploting unemployment and poverty</span> <br>p <span class="blue"><-</span> plot_ly<span class="blue">(</span>data <span class="blue">=</span> dfPovRich, x <span class="blue">= ~</span>perc_poverty, y <span class="blue">= ~</span>unemployment, <br><span style="padding-left: 130px">text <span class="blue">= ~</span>paste<span class="blue">(</span><span class="green">"State: "</span>, state, <span class="green">"&#60;br&#62;County:"</span>, county, </span><br><span style="padding-left: 200px"><span class="green">"&#60;br&#62;% in Poverty:"</span>, perc_poverty, </span><br><span style="padding-left: 200px"><span class="green">"&#60;br&#62;% Unemployment:"</span>, unemployment, </span><br><span style="padding-left: 200px"><span class="green">"&#60;br&#62;Total Population:"</span>, population_estimate<span class="blue">)</span>, </span><br><span style="padding-left: 130px">marker <span class="blue">=</span> list<span class="blue">(</span>size <span class="blue">= 15</span>, color <span class="blue">= ~</span>category,</span> <br><span style="padding-left: 235px">line <span class="blue">=</span> list<span class="blue">(</span>color <span class="blue">=</span> <span class="green">"#04234d"</span>, </span><br><span style="padding-left: 300px">width <span class="blue">= 1))) %>%</span> </span><br><span style="padding-left: 130px">layout<span class="blue">(</span>title <span class="blue">=</span> <span class="green">"Poverty vs Unemployment Counties"</span>, </span><br><span style="padding-left: 210px">yaxis <span class="blue">=</span> list<span class="blue">(</span>zeroline <span class="blue">= FALSE)</span>, </span><br><span style="padding-left: 210px">xaxis <span class="blue">=</span> list<span class="blue">(</span>zeroline <span class="blue">= FALSE))</span>;p </span></div><button id="14">Run Code</button>',
    14: '<div class="frames"><iframe class="graphs" src="unemployment_poverty.html"></iframe></div><div class="info"><p>Interesting, some counties have a very low unemployment rate, yet they still rank among the most poor.</p><p>Is your county on the plot?</p><p>Lets continue with one more graph before building our model and dig a little into the education ratings throughout the years.</p><p>One other way to arrange the data for plotting is simply hard coding it, if it is small data our you just want to quickly visualize it, it might be even faster.</p></div><div class="code"><span class="comment">#Loading data manually</span> <br>less <span class="blue"><-</span> c<span class="blue">(47.7</span>, <span class="blue">33.5</span>, <span class="blue">24.8</span>, <span class="blue">19.6</span>, <span class="blue">13.3)</span> <br>high <span class="blue"><-</span> c<span class="blue">(31.1</span>, <span class="blue">34.6</span>, <span class="blue">30.0</span>, <span class="blue">28.6</span>, <span class="blue">27.8)</span> <br>colle <span class="blue"><-</span> c<span class="blue">(10.6</span>, <span class="blue">15.7</span>, <span class="blue">24.9</span>, <span class="blue">27.4</span>, <span class="blue">29.1)</span> <br>bach <span class="blue"><-</span> c<span class="blue">(10.7</span>, <span class="blue">16.2</span>, <span class="blue">20.3</span>, <span class="blue">24.4</span>, <span class="blue">29.8)</span> <br>x <span class="blue"><-</span> c<span class="blue">(1970</span>, <span class="blue">1980</span>, <span class="blue">1990</span>, <span class="blue">2000</span>, <span class="blue">2010)</span> <br><br>data <span class="blue"><-</span> data.frame<span class="blue">(</span>x, less, high, colle, bach<span class="blue">)</span> <br> <br><span class="comment">#Ploting education throughout the decades </span> <br>p <span class="blue"><-</span> plot_ly<span class="blue">(</span>data, x <span class="blue">= ~</span>x, y <span class="blue">= ~</span>less, type <span class="blue">=</span> <span class="green">"bar"</span>, name <span class="blue">=</span> <span class="green">"% Less than High School"</span>, <br><span style="padding-left: 130px">marker <span class="blue">=</span> list<span class="blue">(</span>color <span class="blue">=</span> <span class="green">"#84234d"</span><span class="blue">)) %>%</span> </span> <br><span style="padding-left: 50px">add_trace<span class="blue">(</span>y <span class="blue">= ~</span>high, name <span class="blue">=</span> <span class="green">"% High School"</span>, </span> <br><span style="padding-left: 170px">marker <span class="blue">=</span> list<span class="blue">(</span>color <span class="blue">=</span> <span class="green">"#64234d"</span><span class="blue">)) %>%</span> </span><br><span style="padding-left: 50px">add_trace<span class="blue">(</span>y <span class="blue">= ~</span>colle, name <span class="blue">=</span> <span class="green">"% College Incomplete"</span>, </span><br><span style="padding-left: 170px">marker <span class="blue">=</span> list<span class="blue">(</span>color <span class="blue">=</span> <span class="green">"#24234d"</span><span class="blue">)) %>%</span> </span><br><span style="padding-left: 50px">add_trace<span class="blue">(</span>y <span class="blue">= ~</span>bach, name <span class="blue">=</span> <span class="green">"% Bachelors +"</span>, </span><br><span style="padding-left: 170px">marker <span class="blue">=</span> list<span class="blue">(</span>color <span class="blue">=</span> <span class="green">"#04234d"</span><span class="blue">)) %>% </span> </span><br><span style="padding-left: 50px">layout<span class="blue">(</span>title <span class="blue">=</span> <span class="green">"Education in the U.S time series"</span>, </span><br><span style="padding-left: 125px">xaxis <span class="blue">=</span> list<span class="blue">(</span>title <span class="blue">=</span> <span class="green">""</span>,tickfont <span class="blue">=</span> list<span class="blue">(</span></span>, </span><br><span style="padding-left: 208px">size <span class="blue">= 14</span> ,color <span class="blue">=</span> <span class="green">"rgb(107, 107, 107)"</span><span class="blue">))</span>, </span><br><span style="padding-left: 125px">yaxis <span class="blue">=</span> list<span class="blue">(</span>title <span class="blue">=</span> <span class="green">"% of Population"</span>, </span> <br><span style="padding-left: 208px">titlefont <span class="blue">=</span> list<span class="blue">(</span>size <span class="blue">= 16</span>, </span><br><span style="padding-left: 208px">color <span class="blue">=</span> <span class="green">"rgb(107, 107, 107)"</span><span class="blue">)</span>, </span> <br><span style="padding-left: 208px">tickfont <span class="blue">=</span> list<span class="blue">(</span>size <span class="blue">= 14</span>, </span> <br><span style="padding-left: 208px">color <span class="blue">=</span> <span class="green">"rgb(107, 107, 107)"</span><span class="blue">))</span>, </span><br><span style="padding-left: 125px">legend <span class="blue">=</span> list<span class="blue">(</span>x <span class="blue">= 1</span>, <span class="blue">y = 1</span>, bgcolor <span class="blue">=</span> <span class="green">"rgba(255, 255, 255, 0)"</span>, </span> <br><span style="padding-left: 225px">bordercolor <span class="blue">=</span> <span class="green">"rgba(255, 255, 255, 0)"</span><span class="blue">)</span>, </span> <br><span style="padding-left: 125px">barmode <span class="blue">=</span> <span class="green">"group"</span>, bargap <span class="blue">= 0.15</span>, bargroupgap <span class="blue">= 0.1)</span>;p </span></div><button id="15">Run Code</button>',
    15: '<div class="frames"><iframe class="graphs" src="assets/educationGraph.html"></iframe></div><div class="info"><p>This is beautiful!</p><p>In the 70s almost half the population did not have high school and only 10% had a Bachelors.</p><p>They were pretty much even in the 90s and now you can see the difference.</p><p>Good job USA!</p><p>Ok, lets start building our Logistic Regression model.</p></div><div class="code"><span class="orange">library</span><span class="blue">(</span>corrgram<span class="blue">)</span><br><span class="orange">library</span><span class="blue">(</span>caTools<span class="blue">)</span><br><br> <span class="comment">#Import the dataset</span><br>df <span class="blue"><-</span> read.csv<span class="blue">(</span><span class="green">"Election2.csv"</span><span class="blue">)</span><br><br><span class="comment">#Create a column called result which just stores <br>#the values 1 for Republican and 0 for Democrat </span> <br>df<span class="blue">$</span>result <span class="blue"><-</span> ifelse<span class="blue">(</span>df<span class="blue">$</span>point_diff <span class="blue">> 0</span>,<span class="blue">1</span>,<span class="blue">0)</span><br>df <span class="blue">%>%</span> select<span class="blue">(</span>result<span class="blue">) %>%</span> count<span class="blue">(</span>result<span class="blue">)</span><br><span class="comment">#Check if any NA value</span> <br>any<span class="blue">(</span>is.na<span class="blue">(</span>df<span class="blue">))</span> <br> <br><span class="comment">#Correlation with all the numeric values</span> <br>num.cols <span class="blue"><-</span> sapply<span class="blue">(</span>df, is.numeric<span class="blue">)</span><br>cor.data <span class="blue"><-</span> cor<span class="blue">(</span>df<span class="blue">[</span>,num.cols<span class="blue">])</span>;cor.data<br><br><span class="comment">#Two types of ploting the correlation</span><br>corrplot<span class="blue">(</span>cor.data,method<span class="blue">=</span><span class="green">"color"</span><span class="blue">)</span><br>corrgram<span class="blue">(</span>df,order<span class="blue">=TRUE</span>, lower.panel<span class="blue">=</span>panel.shade, upper.panel<span class="blue">=</span>panel.pie, text.panel<span class="blue">=</span>panel.txt<span class="blue">)</span></div><button id="16">Run Code</button>',
    16: '<div class="content"><img class="names" src="assets/Rplot.png"></div><div class="info"><p>Ok, so we checked all the variables correlation, now we are going to split the data into training set and test set.</p><p>This done we only need to build the model with any variables chosen and run it.</p></div><div class="code"><span class="comment"># Spliting Data</span> <br>sample <span class="blue"><-</span> sample.split<span class="blue">(</span>df<span class="blue">$</span>result, SplitRatio <span class="blue">= 0.70)</span> <br><span class="comment"># Training Data <br># SplitRatio =  sample==TRUE </span> <br>train <span class="blue">=</span> subset<span class="blue">(</span>df, sample <span class="blue">== TRUE)</span> <br><span class="comment"># Test Data </span><br>test <span class="blue">=</span> subset<span class="blue">(</span>df, sample <span class="blue">== FALSE) </span> <br><br><span class="comment">#Build and run the model </span> <br>model <span class="blue"><-</span> glm<span class="blue">(</span>formula<span class="blue">=</span>result <span class="blue">~</span> state <span class="blue">+</span> female.<span class="blue">+</span> white <span class="blue">+</span> black <span class="blue">+</span> native <span class="blue">+</span> asian <span class="blue">+</span> hawaiian <span class="blue">+</span><br> multiple_races <span class="blue">+</span> hispanic <span class="blue">+</span> foreign_born <span class="blue">+</span> perc_poverty <span class="blue">+</span> population_estimate <span class="blue">+</span><br> unemployment <span class="blue">+</span> less_than_hs <span class="blue">+</span> highschool <span class="blue">+</span> associate <span class="blue">+</span> bachelor_or_higher <span class="blue">+</span><br> sum_crimes, family <span class="blue">=</span> binomial<span class="blue">(</span>link<span class="blue">=</span><span class="green">"logit"</span><span class="blue">)</span>, train<span class="blue">)</span><br><br> summary<span class="blue">(</span>model<span class="blue">)</span></div><button id="17">Run Code</button>',
    17: '<div class="content"><img class="names" src="assets/model.png"></div><div class="info"><p>On the right side of each coefficient there is its importance to the model, 3 stars being the best.</p><p>Cool! Lets calculate our predictions, transform the results a little bit and check the model accuracy.</p></div><div class="code"><span class="comment">#Calculating the predictions</span> <br>fittedProbabilities <span class="blue"><-</span> predict<span class="blue">(</span>model,newdata<span class="blue">=</span>test,type<span class="blue">=</span><span class="green">"response"</span><span class="blue">)</span> <br><br><span class="comment">#Transform the results in to 0, 1</span> <br>fittedResults <span class="blue"><-</span> ifelse<span class="blue">(</span>fittedProbabilities <span class="blue">> 0.5</span>,<span class="blue">1</span>,<span class="blue">0)</span> <br><br><span class="comment">#Checking model accuracy</span><br>misClasificError <span class="blue"><-</span> mean<span class="blue">(</span>fittedResults <span class="blue">!=</span> test<span class="blue">$</span>result<span class="blue">)</span> <br>acc <span class="blue"><-</span> paste<span class="blue">(</span>c<span class="blue">(</span>round<span class="blue">(1-</span>misClasificError, <span class="blue">6)*100</span>,<span class="green">"%"</span><span class="blue">)</span>, collapse<span class="blue">=</span><span class="green">""</span><span class="blue">)</span><br> paste<span class="blue">(</span><span class="green">"ACCURACY"</span>, acc<span class="blue">)</span> <br> <br><span class="comment">#Confusion Matrix</span><br>table<span class="blue">(</span>test<span class="blue">$</span>result, fittedProbabilities <span class="blue">> 0.5)</span></div><button id="18">Run Code</button>',
    18: '<div class="code2"><span class="green"> "ACCURACY 93.3548%" <br><br><span style="padding-left: 50px"> FALSE    TRUE </span><br>0   <span style="padding-left: 43px">113        33 </span><br>1    <span style="padding-left: 44px">29         758 </span></span></div><div class="info"><p> Alright!</p><p> This means that based on the information we have from the counties we were able to guess the outcome of the election 871 times out of 933.</p><p>Looks good to me!</p><p>If you want to do more tests just change the variable 0.7 on the training set.</p><p>Also feel encouraged to change the variables used in the model for even better performance!</p><p>Thank you, see you next time!</p></div>'
};

var allow = {
    0: true, 1: true, 2: 'allContent', 3: true, 4: true, 5: 'codeContent',
    6: 'codeContent', 7: 'codeContent', 8: 'codeContent',
    9: 'codeContent', 10: 'codeContent', 11: 'codeContent', 12: 'allContent',
    13: 'frames', 14: 'frames', 15: 'frames', 16: 'allContent', 17: 'allContent', 18: 'code2'
};

$(document).ready(function() {

    var modal1 = $("#myModal");
    var modal = document.getElementById('myModal');

    $("div.class1").on("click", "button", function(){
        var id = $(this).attr("id");
        var id2 = parseInt(id)+1;
        var position = $(this).offset().top;
        if (allow[id] === true) {
            $(".class1").last().append(htmls[id]);
            allow[id] = false;
            $('html,body').animate({
                scrollTop: position+30
            }, 900);
            $(".info").last().fadeIn(900);
            $(".code").last().fadeIn(900);
            $("#"+id2).fadeIn(900);
        }
        else if (allow[id] === 'allContent') {
            $(".class1").last().append(htmls[id]);
            allow[id] = false;
            $('html,body').animate({
                scrollTop: position+30
            }, 900);
            $(".info").last().fadeIn(900);
            $(".code").last().fadeIn(900);
            $("img").last().fadeIn(900);
            $("#"+id2).fadeIn(900);
        }
        else if (allow[id] === 'codeContent') {
            $(".class1").last().append(htmls[id]);
            allow[id] = false;
            $('html,body').animate({
                scrollTop: position+30
            }, 900);
            $(".code").last().fadeIn(900);
            $("img").last().fadeIn(900);
            $("#"+id2).fadeIn(900);
        }
        else if (allow[id] === 'frames') {
            $(".class1").last().append(htmls[id]);
            allow[id] = false;
            $('html,body').animate({
                scrollTop: position+30
            }, 900);
            $(".info").last().fadeIn(900);
            $(".code").last().fadeIn(900);
            $(".graphs").last().fadeIn(900);
            $("#"+id2).fadeIn(900);
        }
        else if (allow[id] === 'code2') {
            $(".class1").last().append(htmls[id]);
            allow[id] = false;
            $('html,body').animate({
                scrollTop: position+30
            }, 900);
            $(".info").last().fadeIn(900);
            $(".code2").last().fadeIn(900);
        }
    });

    $("#1").on("click", function(){
        var id = $(this).attr("id");
        var id2 = parseInt(id)+1;
        var position = $(this).offset().top;
        if (allow[id]) {
            $(".class1").last().append(htmls[id]);
            allow[id] = false;
            $('html,body').animate({
                scrollTop: position+30
            }, 900);
            $(".info").last().fadeIn(900);
            $(".code").last().fadeIn(900);
            $("#"+id2).fadeIn(900);
        }
    });

    window.onclick = function(event) {
        if (event.target === modal) {
            modal1.fadeOut(300);
        }
    };

    $("#contact").on("click", function () {
        modal1.fadeIn(300);
    });

});
